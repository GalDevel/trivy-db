// Code generated by mockery v1.0.0. DO NOT EDIT.

package github

import (
	context "context"
	os "os"

	"github.com/google/go-github/v28/github"
	mock "github.com/stretchr/testify/mock"
)

// MockRepositoryInterface is an autogenerated mock type for the RepositoryInterface type
type MockRepositoryInterface struct {
	mock.Mock
}

// CreateRelease provides a mock function with given fields: ctx, release
func (_m *MockRepositoryInterface) CreateRelease(ctx context.Context, release *github.RepositoryRelease) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, release)

	var r0 *github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, *github.RepositoryRelease) *github.RepositoryRelease); ok {
		r0 = rf(ctx, release)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, *github.RepositoryRelease) *github.Response); ok {
		r1 = rf(ctx, release)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.RepositoryRelease) error); ok {
		r2 = rf(ctx, release)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteRef provides a mock function with given fields: ctx, ref
func (_m *MockRepositoryInterface) DeleteRef(ctx context.Context, ref string) (*github.Response, error) {
	ret := _m.Called(ctx, ref)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *github.Response); ok {
		r0 = rf(ctx, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelease provides a mock function with given fields: ctx, id
func (_m *MockRepositoryInterface) DeleteRelease(ctx context.Context, id int64) (*github.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, int64) *github.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReleaseByTag provides a mock function with given fields: ctx, tag
func (_m *MockRepositoryInterface) GetReleaseByTag(ctx context.Context, tag string) (*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, tag)

	var r0 *github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, string) *github.RepositoryRelease); ok {
		r0 = rf(ctx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *github.Response); ok {
		r1 = rf(ctx, tag)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, tag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListReleases provides a mock function with given fields: ctx, opt
func (_m *MockRepositoryInterface) ListReleases(ctx context.Context, opt *github.ListOptions) ([]*github.RepositoryRelease, *github.Response, error) {
	ret := _m.Called(ctx, opt)

	var r0 []*github.RepositoryRelease
	if rf, ok := ret.Get(0).(func(context.Context, *github.ListOptions) []*github.RepositoryRelease); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.RepositoryRelease)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, *github.ListOptions) *github.Response); ok {
		r1 = rf(ctx, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *github.ListOptions) error); ok {
		r2 = rf(ctx, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UploadReleaseAsset provides a mock function with given fields: ctx, id, opt, file
func (_m *MockRepositoryInterface) UploadReleaseAsset(ctx context.Context, id int64, opt *github.UploadOptions, file *os.File) (*github.ReleaseAsset, *github.Response, error) {
	ret := _m.Called(ctx, id, opt, file)

	var r0 *github.ReleaseAsset
	if rf, ok := ret.Get(0).(func(context.Context, int64, *github.UploadOptions, *os.File) *github.ReleaseAsset); ok {
		r0 = rf(ctx, id, opt, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.ReleaseAsset)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, int64, *github.UploadOptions, *os.File) *github.Response); ok {
		r1 = rf(ctx, id, opt, file)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, *github.UploadOptions, *os.File) error); ok {
		r2 = rf(ctx, id, opt, file)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
